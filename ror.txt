<?php
// EXAMPLE 1: Integration in ROR Upload Script (uploadData_ui.php or similar)
// Add this at the top of your ROR upload file after session_start()

session_start();
require_once 'activity_logger.php'; // Include the logging functions

// Your existing database connection code...
// ... existing code ...

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['ror_file'])) {
    $uploadedFile = $_FILES['ror_file'];
    $fileName = $uploadedFile['name'];
    
    try {
        // Your existing ROR processing code here...
        // Let's say you process the file and get $recordCount
        
        $recordCount = 0; // This should be the actual count from your processing
        
        // Process your ROR file here...
        // ... your existing ROR processing logic ...
        
        // After successful processing, log the activity
        if ($recordCount > 0) {
            logRORUpload(
                $pdo, 
                $_SESSION['user_id'] ?? null, 
                $_SESSION['full_name'] ?? 'Unknown User', 
                $fileName, 
                $recordCount
            );
            
            echo json_encode([
                'success' => true, 
                'message' => "ROR file uploaded successfully. {$recordCount} records processed."
            ]);
        }
        
    } catch (Exception $e) {
        // Log failed upload attempt
        logActivity(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'Unknown User', 
            'upload_ror', 
            "Failed to upload ROR file: {$fileName} - Error: " . $e->getMessage()
        );
        
        echo json_encode(['success' => false, 'message' => 'Upload failed: ' . $e->getMessage()]);
    }
}

// ==================================================================================
// EXAMPLE 2: Integration in RTS Upload Script (rts_ui.php or similar)

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['rts_file'])) {
    $uploadedFile = $_FILES['rts_file'];
    $fileName = $uploadedFile['name'];
    
    try {
        // Your existing RTS processing code here...
        $recordCount = 0; // This should be the actual count from your processing
        
        // Process your RTS file here...
        // ... your existing RTS processing logic ...
        
        // After successful processing, log the activity
        if ($recordCount > 0) {
            logRTSUpload(
                $pdo, 
                $_SESSION['user_id'] ?? null, 
                $_SESSION['full_name'] ?? 'Unknown User', 
                $fileName, 
                $recordCount
            );
            
            echo json_encode([
                'success' => true, 
                'message' => "RTS file uploaded successfully. {$recordCount} records processed."
            ]);
        }
        
    } catch (Exception $e) {
        // Log failed upload attempt
        logActivity(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'Unknown User', 
            'upload_rts', 
            "Failed to upload RTS file: {$fileName} - Error: " . $e->getMessage()
        );
        
        echo json_encode(['success' => false, 'message' => 'Upload failed: ' . $e->getMessage()]);
    }
}

// ==================================================================================
// EXAMPLE 3: Integration in Release Script (wherever you handle releases)

// For individual examinee release
if (isset($_POST['release_examinee'])) {
    $examineeId = $_POST['examinee_id'];
    $examineeName = $_POST['examinee_name'] ?? 'Unknown Examinee';
    
    try {
        // Your existing release logic here...
        // ... process the release ...
        
        // After successful release, log the activity
        logReleaseActivity(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'Unknown User', 
            $examineeName,
            'individual',
            "Release ID: {$examineeId}"
        );
        
        echo json_encode(['success' => true, 'message' => "Results released for {$examineeName}"]);
        
    } catch (Exception $e) {
        // Log failed release attempt
        logActivity(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'Unknown User', 
            'release', 
            "Failed to release results for {$examineeName} - Error: " . $e->getMessage()
        );
        
        echo json_encode(['success' => false, 'message' => 'Release failed: ' . $e->getMessage()]);
    }
}

// For bulk release
if (isset($_POST['bulk_release'])) {
    $selectedExaminees = $_POST['selected_examinees'] ?? [];
    $examineesCount = count($selectedExaminees);
    
    try {
        // Your existing bulk release logic here...
        $successCount = 0;
        $examineesNames = [];
        
        foreach ($selectedExaminees as $examineeId) {
            // Get examinee name from database
            $stmt = $pdo->prepare("SELECT full_name FROM examinees WHERE id = ?");
            $stmt->execute([$examineeId]);
            $examinee = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if ($examinee) {
                $examineesNames[] = $examinee['full_name'];
                // Process individual release...
                $successCount++;
            }
        }
        
        if ($successCount > 0) {
            $releaseDetails = "Examinees: " . implode(', ', array_slice($examineesNames, 0, 5));
            if (count($examineesNames) > 5) {
                $releaseDetails .= " and " . (count($examineesNames) - 5) . " more";
            }
            
            logBulkReleaseActivity(
                $pdo, 
                $_SESSION['user_id'] ?? null, 
                $_SESSION['full_name'] ?? 'Unknown User', 
                $successCount,
                $releaseDetails
            );
        }
        
        echo json_encode(['success' => true, 'message' => "Bulk release completed for {$successCount} examinees"]);
        
    } catch (Exception $e) {
        logActivity(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'Unknown User', 
            'release', 
            "Failed bulk release for {$examineesCount} examinees - Error: " . $e->getMessage()
        );
        
        echo json_encode(['success' => false, 'message' => 'Bulk release failed: ' . $e->getMessage()]);
    }
}

// ==================================================================================
// EXAMPLE 4: Integration in Login Script (index.php or login.php)

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['login'])) {
    $email = $_POST['email'] ?? '';
    $password = $_POST['password'] ?? '';
    
    try {
        // Your existing login validation logic...
        $stmt = $pdo->prepare("SELECT * FROM users WHERE email = ?");
        $stmt->execute([$email]);
        $user = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($user && password_verify($password, $user['password'])) {
            // Successful login
            $_SESSION['logged_in'] = true;
            $_SESSION['user_id'] = $user['id'];
            $_SESSION['full_name'] = $user['full_name'];
            $_SESSION['email'] = $user['email'];
            
            // Log successful login
            logLoginActivity($pdo, $user['id'], $user['full_name'], true);
            
            header("Location: dashboard.php");
            exit();
        } else {
            // Failed login
            logLoginActivity($pdo, null, $email, false);
            
            $error_message = "Invalid email or password";
        }
        
    } catch (Exception $e) {
        // Log login error
        logActivity($pdo, null, $email, 'login', "Login system error - " . $e->getMessage());
        $error_message = "Login system error. Please try again.";
    }
}

// ==================================================================================
// EXAMPLE 5: Integration in User Registration (dashboard.php or register.php)

if (isset($_POST['register_user'])) {
    $fullName = $_POST['full_name'] ?? '';
    $email = $_POST['email'] ?? '';
    $password = $_POST['password'] ?? '';
    
    try {
        // Your existing user creation logic...
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        
        $stmt = $pdo->prepare("INSERT INTO users (full_name, email, password, created_at) VALUES (?, ?, ?, NOW())");
        $stmt->execute([$fullName, $email, $hashedPassword]);
        
        // Log user creation
        logUserCreation(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'System', 
            $fullName, 
            $email
        );
        
        echo json_encode(['success' => true, 'message' => "User {$fullName} created successfully"]);
        
    } catch (Exception $e) {
        // Log failed user creation
        logActivity(
            $pdo, 
            $_SESSION['user_id'] ?? null, 
            $_SESSION['full_name'] ?? 'System', 
            'create', 
            "Failed to create user {$fullName} ({$email}) - Error: " . $e->getMessage()
        );
        
        echo json_encode(['success' => false, 'message' => 'User creation failed: ' . $e->getMessage()]);
    }
}

// ==================================================================================
// EXAMPLE 6: Dashboard Integration - Show Recent Activities

// In your dashboard.php, add this to show recent activities:
?>

<!-- Add this HTML section to your dashboard -->
<div class="card dashboard-card">
    <div class="card-header">
        <h5 class="card-title">
            <i class="fas fa-clock me-2"></i>Recent Activities
        </h5>
    </div>
    <div class="card-body">
        <?php
        // Get recent activities for current user or all users (for admins)
        $recentActivities = getRecentActivities($pdo, 5); // Get last 5 activities
        
        if (!empty($recentActivities)): ?>
            <div class="activity-timeline">
                <?php foreach ($recentActivities as $activity): ?>
                    <div class="activity-item">
                        <div class="activity-icon">
                            <i class="fas fa-<?php echo $activity['action'] === 'login' ? 'sign-in-alt' : ($activity['action'] === 'upload_ror' ? 'file-upload' : 'info-circle'); ?>"></i>
                        </div>
                        <div class="activity-content">
                            <div class="activity-text">
                                <strong><?php echo htmlspecialchars($activity['full_name']); ?></strong>
                                <?php echo htmlspecialchars($activity['description']); ?>
                            </div>
                            <div class="activity-time">
                                <?php echo date('M j, Y g:i A', strtotime($activity['created_at'])); ?>
                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
            <div class="text-center mt-3">
                <a href="activity_log.php" class="btn btn-outline-primary btn-sm">
                    <i class="fas fa-list me-1"></i>View All Activities
                </a>
            </div>
        <?php else: ?>
            <p class="text-muted text-center">No recent activities</p>
        <?php endif; ?>
    </div>
</div>

<?php
// QUICK SETUP INSTRUCTIONS:
/*
1. Save the activity_logger.php file in your project root directory
2. Include it at the top of your files: require_once 'activity_logger.php';
3. Replace the example code sections with your actual variable names and logic
4. Make sure your database has the activity_log table with proper columns
5. Test each integration one by one

DATABASE TABLE STRUCTURE (if not already created):
CREATE TABLE IF NOT EXISTS `activity_log` (
    `id` int(11) NOT NULL AUTO_INCREMENT,
    `user_id` int(11) DEFAULT NULL,
    `account_name` varchar(255) DEFAULT NULL,
    `user_name` varchar(255) DEFAULT NULL,
    `activity_type` varchar(100) DEFAULT NULL,
    `action` varchar(100) DEFAULT NULL,
    `description` text DEFAULT NULL,
    `ip_address` varchar(45) DEFAULT NULL,
    `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`id`),
    KEY `user_id` (`user_id`),
    KEY `action` (`action`),
    KEY `created_at` (`created_at`)
);
*/
?>


ALTER TABLE activity_log 
ADD COLUMN IF NOT EXISTS ip_address VARCHAR(45) DEFAULT NULL,
ADD INDEX IF NOT EXISTS idx_action (action),
ADD INDEX IF NOT EXISTS idx_created_at (created_at);